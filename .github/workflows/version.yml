name: 自动版本管理

on:
  push:
    branches: [ main ]
    paths-ignore:
      - '**.md'
      - '.github/workflows/version.yml'

jobs:
  version:
    runs-on: ubuntu-latest
    
    steps:
      - name: 检出代码
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
          
      - name: 设置 Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          
      - name: 安装依赖
        run: npm ci
        
      - name: 分析提交信息
        id: analyze
        run: |
          # 获取上次提交到这次的提交信息
          COMMITS=$(git log --oneline ${{ github.event.before }}..${{ github.sha }})
          echo "commits=$COMMITS" >> $GITHUB_OUTPUT
          
          # 检查是否有破坏性变更
          if echo "$COMMITS" | grep -q "BREAKING CHANGE\|feat!:"; then
            echo "version_type=major" >> $GITHUB_OUTPUT
          elif echo "$COMMITS" | grep -q "feat:"; then
            echo "version_type=minor" >> $GITHUB_OUTPUT
          else
            echo "version_type=patch" >> $GITHUB_OUTPUT
          fi
          
      - name: 更新版本
        id: version
        run: |
          # 获取当前版本
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          echo "current_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          
          # 解析版本号
          IFS='.' read -r major minor patch <<< "$CURRENT_VERSION"
          
          # 根据提交类型更新版本
          case "${{ steps.analyze.outputs.version_type }}" in
            "major")
              NEW_MAJOR=$((major + 1))
              NEW_VERSION="$NEW_MAJOR.0.0"
              ;;
            "minor")
              NEW_MINOR=$((minor + 1))
              NEW_VERSION="$major.$NEW_MINOR.0"
              ;;
            "patch")
              NEW_PATCH=$((patch + 1))
              NEW_VERSION="$major.$minor.$NEW_PATCH"
              ;;
          esac
          
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          
          # 更新 package.json
          node -e "
            const pkg = require('./package.json');
            pkg.version = '$NEW_VERSION';
            require('fs').writeFileSync('package.json', JSON.stringify(pkg, null, 2));
          "
          
      - name: 提交版本更新
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add package.json
          git commit -m "chore: bump version to ${{ steps.version.outputs.new_version }}" || exit 0
          git push
          
      - name: 创建版本标签
        run: |
          git tag v${{ steps.version.outputs.new_version }}
          git push origin v${{ steps.version.outputs.new_version }} 